/*
* Copyright 2018 John Ahlroos
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import org.apache.tools.ant.filters.ReplaceTokens


/***********************************************************************************************************************
 *
 * Plugins
 *
 **********************************************************************************************************************/
plugins {
    id 'groovy'
    id 'maven'
    id 'idea'
    id 'codenarc'
    id 'com.gradle.plugin-publish' version '0.9.9'
    id 'checkstyle'
}

/***********************************************************************************************************************
 *
 * Basic properties
 *
 **********************************************************************************************************************/

defaultTasks 'jar'
group = "com.devsoap.plugin"
version = project.hasProperty('BUILD_VERSION') ? getProperty('BUILD_VERSION') : 'SNAPSHOT-'+ new Date().format('yyyyMMdd')
archivesBaseName ='gradle-vaadin-plugin'
sourceCompatibility = 1.8
targetCompatibility = 1.8
ext {
    testCategory = project.hasProperty('TEST_CATEGORY') ? getProperty('TEST_CATEGORY') : null
}

/***********************************************************************************************************************
 *
 * Repositories & Dependencies
 *
 **********************************************************************************************************************/
repositories{
	mavenCentral()
    maven { // FIXME For Junit 4.13-SNAPSHOT, remove when released
        name 'JBoss'
        url 'https://repository.jboss.org/'
    }
}

configurations {
    deploy
    proxyTest
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    // Jetty application server
    compile "org.eclipse.jetty.aggregate:jetty-all:${project.property('jetty.version')}"
    compile "org.eclipse.jetty:jetty-annotations:${project.property('jetty.version')}"
    compile "org.eclipse.jetty:jetty-plus:${project.property('jetty.version')}"
    compile "org.eclipse.jetty:jetty-deploy:${project.property('jetty.version')}"

    //Payara application server
    compile "fish.payara.extras:payara-embedded-web:${project.property('payara.version')}"

    // For GET requests
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    // Sass compilation with libSass
    compile "io.bit3:jsass:${project.property('jsass.version')}"

    deploy 'org.apache.maven.wagon:wagon-ssh:3.0'

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.13-SNAPSHOT'

    // ProxyTest needs its own special configuration to avoid conflicts
    proxyTest ('org.mock-server:mockserver-netty:3.11') {
        exclude group:'ch.qos.logback'
    }
    project.configurations.proxyTest.exclude group: 'fish.payara.extras'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/***********************************************************************************************************************
 *
 * Compilation
 *
 **********************************************************************************************************************/

/**
 * Compiles the tests
 */
compileTestGroovy {
    classpath += configurations.proxyTest
}

/**
 * Processes the resources before compilation
 */
processResources {

    // Directory where previously built versions are located
    def debugDir = new File(project.buildDir, 'libs').canonicalPath

    // Mark processed resources as dirty if build properties change
    inputs.property('version', project.version)
    inputs.property('debugdir', debugDir)

    // Apply build properties
    from(sourceSets.main.resources.srcDirs){
        // Files Matching is required to prevent binary files from becoming corrupt
        filesMatching('*.properties'){
            filter(ReplaceTokens, tokens: [
                    version: project.version,
                    debugdir: debugDir
            ])
        }
    }
}


/***********************************************************************************************************************
 *
 * Artifacts
 *
 **********************************************************************************************************************/

/**
 * Main plugin artifact.
 */
jar {
    manifest{
        attributes(
                'Vaadin-Package-Version': 1,
                'Vaadin-License-Title': 'Apache 2.0',
                'Implementation-Title': 'Vaadin Plugin for Gradle',
                'Implementation-Version': version,
                'Implementation-Vendor': 'John Ahlroos',
        )
    }
    from 'gradle.properties'
}

/**
 * Plugin artifact sources.
 */
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    include 'com/**/*.groovy'
    include 'com/**/*.java'
}

/**
 * Artifacts in build
 */
artifacts {
    archives jar
    archives sourcesJar
}

/**
 * API documentation
 */
groovydoc {
    docTitle = "Gradle Vaadin Plugin $version API"
    windowTitle = "Gradle Vaadin Plugin Version $version"
    footer = "Gradle Vaadin Plugin is maintained by <a href=\"https://github.com/johndevs/\">@johndevs</a>. Copyright Â© 2018"
}

/***********************************************************************************************************************
 *
 * Tests
 *
 **********************************************************************************************************************/

/**
 * Configure test phase only to run ordinary unit tests.
 */
test {
    exclude '**/tests/**'
}

/**
 * Run integration tests with a different tasks so they are only run when running check
 */
task uncategorizedTests(type:Test, dependsOn:['test','jar']) {
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    useJUnit {
        excludeCategories 'com.devsoap.plugin.categories.WidgetsetCompile'
        excludeCategories 'com.devsoap.plugin.categories.ThemeCompile'
        excludeCategories 'com.devsoap.plugin.categories.WidgetsetAndThemeCompile'
        excludeCategories 'com.devsoap.plugin.categories.RunProject'
    }
    exclude  '**/tests/*ProxyTest*'
    systemProperty 'integrationTestProjectVersion', version
    maxParallelForks = Runtime.runtime.availableProcessors() > 1 ? Runtime.runtime.availableProcessors() - 1 : 1
}

task widgetsetCompileTests(type:Test, dependsOn:['test','jar']) {
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    useJUnit {
        includeCategories 'com.devsoap.plugin.categories.WidgetsetCompile'
        excludeCategories 'com.devsoap.plugin.categories.ThemeCompile'
    }
    systemProperty 'integrationTestProjectVersion', version
    maxParallelForks = Runtime.runtime.availableProcessors() > 1 ? Runtime.runtime.availableProcessors() - 1 : 1
}

task themeCompileTests(type:Test, dependsOn:['test','jar']) {
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    useJUnit {
        excludeCategories 'com.devsoap.plugin.categories.WidgetsetCompile'
        includeCategories 'com.devsoap.plugin.categories.ThemeCompile'
    }
    systemProperty 'integrationTestProjectVersion', version
    maxParallelForks = Runtime.runtime.availableProcessors() > 1 ? Runtime.runtime.availableProcessors() - 1 : 1
}

task fullCompileTests(type:Test, dependsOn:['test','jar']) {
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    useJUnit {
        includeCategories 'com.devsoap.plugin.categories.WidgetsetAndThemeCompile'
    }
    systemProperty 'integrationTestProjectVersion', version
    maxParallelForks = Runtime.runtime.availableProcessors() > 1 ? Runtime.runtime.availableProcessors() - 1 : 1
}

task runProjectTests(type:Test, dependsOn:['test','jar']) {
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    useJUnit {
        includeCategories 'com.devsoap.plugin.categories.RunProject'
    }
    systemProperty 'integrationTestProjectVersion', version
    maxParallelForks = Runtime.runtime.availableProcessors() > 1 ? Runtime.runtime.availableProcessors() - 1 : 1
}

/**
 * Runs proxy integration test that needs special configuration
 */
task proxyTest(type:Test, dependsOn: ['test','jar']) {
    def oldClassPath = classpath
    classpath = configurations.proxyTest
    classpath += oldClassPath
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
    include  '**/tests/*ProxyTest*'
    systemProperty 'integrationTestProjectVersion', version
}

if(!ext.testCategory) {
    check.dependsOn 'uncategorizedTests'
    check.dependsOn 'widgetsetCompileTests'
    check.dependsOn 'themeCompileTests'
    check.dependsOn 'fullCompileTests'
    check.dependsOn 'runProjectTests'
    check.dependsOn 'proxyTest'
} else{
    check.dependsOn ext.testCategory
}


/***********************************************************************************************************************
 *
 * Quality
 *
 ***********************************************************************************************************************/

codenarc{
    toolVersion = '0.27.0'
    configFile = rootProject.file('config/codenarc/ruleset.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 500
    codenarcTest {
        configFile = rootProject.file('config/codenarc/ruleset-test.groovy')
    }
}

checkstyle {
    configDir = rootProject.file('config/checkstyle')
}

plugins.withType(GroovyBasePlugin) {
    sourceSets.all { sourceSet ->
        task "${sourceSet.getTaskName('checkstyle', 'groovy')}"(type: Checkstyle) {
            configFile = rootProject.file('config/checkstyle/checkstyle.xml')
            source sourceSet.allGroovy
            classpath = sourceSet.compileClasspath
            reports.xml.destination rootProject.file("build/reports/checkstyle/${sourceSet.name}.xml")
        }
    }
}


/***********************************************************************************************************************
 *
 * Deployment
 *
 ***********************************************************************************************************************/

pluginBundle {
    website = 'https://github.com/johndevs/gradle-vaadin-plugin/wiki'
    vcsUrl = 'https://github.com/johndevs/gradle-vaadin-plugin'
    description = 'Build Vaadin applications with Gradle!'
    tags = ['vaadin', 'java', 'groovy', 'kotlin']
    plugins {
        vaadinPlugin {
            id = 'com.devsoap.plugin.vaadin'
            displayName = 'Gradle Vaadin plugin'
        }
    }

    mavenCoordinates {
        groupId = 'com.devsoap.plugin'
        artifactId = 'gradle-vaadin-plugin'
    }
}

/***********************************************************************************************************************
 *
 * Misc.
 *
 **********************************************************************************************************************/
task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}
